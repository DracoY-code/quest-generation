# Start the container in detached background mode:
#   `docker compose [-f <COMPOSE.YAML>]up --no-build -d`
# 
# Stop the container with `compose`:
#   `docker compose [-f <COMPOSE.YAML>]down`
# 
# Run an interactive app service (with exposed ports):
#   `docker compose [-f <COMPOSE.YAML>]run --rm --service-ports --remove-orphans -i <SERVICE-NAME>`
# 
# Start a JupyterLab server at http://localhost:8888/lab:
#   `jupyter lab --ip=0.0.0.0 --port=8888 --allow-root --IdentityProvider.token=''`
# 
# Open an interactive bash shell inside a running container:
#   `docker compose [-f <COMPOSE.YAML>]exec <SERVICE-NAME> bash`
# 
# Launch TensorBoard inside the container at http://localhost:6006:
#   `tensorboard --logdir=<LOGGING-DIR> --host=0.0.0.0 --port=6006`

services:
  jupyterlab:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    command: >
      jupyter lab
      --ip=0.0.0.0
      --port=8888
      --allow-root
      --IdentityProvider.token=''
      --ServerApp.disable_check_xsrf=True
    container_name: questgen-jupyterlab
    env_file:
      - .env
    gpus: all
    image: questgen:${TARGET_PLATFORM}
    networks:
      - jupyternet
    platform: ${DOCKER_PLATFORM}
    ports:
      - "8888:8888"  # JupyterLab
    tty: true
    volumes:
      - ..:/app:rw
    working_dir: /app
  
  tensorboard:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    command: tensorboard --logdir=/app/logs --host=0.0.0.0 --port=6006
    container_name: questgen-tensorboard
    env_file:
      - .env
    image: questgen:${TARGET_PLATFORM}
    networks:
      - jupyternet
    platform: ${DOCKER_PLATFORM}
    ports:
      - "6006:6006"  # TensorBoard
    tty: true
    volumes:
      - ..:/app:rw
    working_dir: /app

networks:
  jupyternet:
    driver: bridge
